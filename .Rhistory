x = (m - media_puntos)
v = f * (x*x)
total = total + v
}
varianza = total / (tabla[cantidad_filas]$CF) - 1
return(varianza)
}
medianas_por_intervalo <- getVarianza(tabla_puntos)
getVarianza <- function(tabla) {
cantidad_filas <- dim(tabla)[1]
total = 0
for (i in 1:cantidad_filas) {
f = tabla$Frequency[i]
m = tabla$Main[i]
x = (m - media_puntos)
v = f * (x*x)
total = total + v
}
varianza = total / (tabla$CF[cantidad_filas]) - 1
return(varianza)
}
medianas_por_intervalo <- getVarianza(tabla_puntos)
getVarianza <- function(tabla) {
cantidad_filas <- dim(tabla)[1]
total = 0
for (i in 1:cantidad_filas) {
f = tabla$Frequency[i]
m = tabla$Main[i]
x = (m - media_puntos)
v = f * (x*x)
total = total + v
}
varianza = total / (tabla$CF[cantidad_filas]) - 1
return(total)
}
varianza <- getVarianza(tabla_puntos)
getVarianza <- function(tabla) {
cantidad_filas <- dim(tabla)[1]
total = 0
for (i in 1:cantidad_filas) {
f = tabla$Frequency[i]
m = tabla$Main[i]
x = (m - media_puntos)
v = f * (x*x)
total = total + v
}
varianza = total / (tabla$CF[cantidad_filas]) - 1
return(varianza)
}
varianza <- getVarianza(tabla_puntos)
desviacion <- sqrt(varianza)
desviacion
rango
tabla_puntos
library(ggplot2)
# Cargar la biblioteca necesaria
install.packages("ggplot2")
library(ggplot2)
# Crear el histograma
histograma <- ggplot(tabla_puntos, aes(x = Main, y = Frequency)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Histograma de Puntos",
x = "Puntos",
y = "Frecuencia") +
theme_minimal()
# Mostrar el histograma
print(histograma)
# Crear el diagrama de sectores
diagrama_sectores <- ggplot(tabla_puntos, aes(x = "", y = Percentage, fill = factor(Lower))) +
geom_bar(stat = "identity") +
coord_polar("y", start=0) +
labs(title = "Diagrama de Sectores de Puntos",
x = NULL,
y = NULL,
fill = "Intervalo de Puntos") +
theme_minimal()
# Mostrar el diagrama de sectores
print(diagrama_sectores)
pie(table(cut(datos$Puntos,breaks = seq(90, 210, by = 12),right = FALSE)))
# Crear el diagrama de sectores
diagrama_sectores <- ggplot(tabla_puntos, aes(x = "", y = Percentage, fill = factor(Lower))) +
geom_bar(stat = "identity") +
coord_polar("y", start=0) +
labs(title = "Diagrama de Sectores de Puntos",
x = NULL,
y = NULL,
fill = "Intervalo de Puntos") +
theme_minimal()
# Mostrar el diagrama de sectores
print(diagrama_sectores)
pie(table(cut(datos$Puntos,breaks = seq(90, 210, by = 12),right = FALSE)))
lista_puntos <- hist(datos$Puntos,breaks = seq(90, 210, by = 12),right = FALSE)
tabla_puntos <- table.freq(lista_puntos)
histograma <- ggplot(tabla_puntos, aes(x = Main, y = Frequency)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Histograma de Puntos",
x = "Puntos",
y = "Frecuencia") +
theme_minimal()
# Mostrar el histograma
print(histograma)
tabla_puntos <- table.freq(lista_puntos)
lista_puntos <- hist(datos$Puntos,breaks = seq(90, 210, by = 12),right = FALSE)
hist(datos$Edades, breaks = seq(18, 38, by = 2), main = "Histograma de Edades Agrupadas",xlab = "Edades",ylab = "Frecuencia",col = "lightblue", right = FALSE)
install.packages("lsr")
install.packages("moments")
install.packages("agricolae")
library(lsr)
library(moments)
library(agricolae)
#DATOS SUELTOS
#LECTURA DEL CSV Y ORGANIZACION DE LOS DATOS POR EDAD
datos <- read.csv("C://Users//Dilan//Downloads//Datos_Estudiantes_Taller1.csv", header = TRUE, sep = ",")
hist(datos$Pesos, breaks = seq(46, 124, by = 6), main = "Histograma de Pesos Agrupadas",xlab = "Pesos",ylab = "Frecuencia",col = "lightblue", right = FALSE)
##histograma
hist(datos$Puntos, breaks = seq(90, 210, by = 12), main = "Histograma de Puntos Agrupados",xlab = "Puntos",ylab = "Frecuencia",col = "lightblue", right = FALSE)
##diagrama de sectores
pie(table(cut(datos$Puntos,breaks = seq(90, 210, by = 12),right = FALSE)),main = "Diagrama de Sectores")
sesgo <- skewness(tabla_puntos$Main)
print(paste("El sesgo de la distribuciÃ³n es:", sesgo))
datos <- read.csv("C://Users//Dilan//Downloads//datos2.csv", header = TRUE, sep = ",")
lista_puntos <- hist(datos$Puntos,breaks = seq(90, 210, by = 12),right = FALSE)
tabla_puntos <- table.freq(lista_puntos)
tabla_puntos
##media
media_puntos = sum(tabla_puntos$Main * tabla_puntos$Frequency) / sum(tabla_puntos$Frequency)
media_puntos
##moda
puntos_i = which.max(tabla_puntos$Frequency)
puntos_fre1 = (tabla_puntos$Frequency[puntos_i] - tabla_puntos$Frequency[puntos_i - 1])
puntos_fre2 = (tabla_puntos$Frequency[puntos_i] - tabla_puntos$Frequency[puntos_i + 1])
moda_puntos = (tabla_puntos$Lower[puntos_i]) + (puntos_fre1 / (puntos_fre1  + puntos_fre2)) * (tabla_puntos$Upper[puntos_i] - tabla_puntos$Lower[puntos_i])
moda_puntos
##mediana
getPosition <- function(n, table){
ite = NULL
for (i in 1:length(table$CF)) {
if (table$CF[i] >= n) {
ite <- i
break
} else {
i = i + 1
}
}
return(ite)
}
#CREE UNA FUNCION QUE CALCULA LA MEDIANA A PARTIR DE LA POSICION, LA TABLA Y EL VALOR DE N
getMediana <- function(n,p,table){
ite = p-1
if(ite==0){
FAA = 0
} else {
FAA <- table$CF[ite]
}
fi = (n - FAA)
mediana = table$Lower[p] + (fi / table$Frequency[p])  * ( table$Upper[p] -  table$Lower[p])
return(mediana)
}
N_puntos = sum(tabla_puntos$Frequency)/2
puntos_i = getPosition(N_puntos,tabla_puntos)
fi_puntos = (N_puntos - tabla_puntos$CF[puntos_i-1])
mediana_puntos = tabla_puntos$Lower[puntos_i] + (fi_puntos / tabla_puntos$Frequency[puntos_i])  * ( tabla_puntos$Upper[puntos_i] -  tabla_puntos$Lower[puntos_i])
mediana_puntos
##varianza
getVarianza <- function(tabla) {
cantidad_filas <- dim(tabla)[1]
total = 0
for (i in 1:cantidad_filas) {
f = tabla$Frequency[i]
m = tabla$Main[i]
x = (m - media_puntos)
v = f * (x*x)
total = total + v
}
varianza = total / (tabla$CF[cantidad_filas]) - 1
return(varianza)
}
varianza <- getVarianza(tabla_puntos)
desviacion <- sqrt(varianza)
##cuartiles
N_q1 = sum(tabla_puntos$Frequency)/4
N_q3 = (3*sum(tabla_puntos$Frequency))/4
q1_puntos_i = getPosition(N_q1,tabla_puntos)
q3_puntos_i = getPosition(N_q3,tabla_puntos)
q1_puntos = getMediana(N_q1,q1_puntos_i,tabla_puntos)
q3_puntos = getMediana(N_q3,q3_puntos_i,tabla_puntos)
rango = q3_puntos - q1_puntos ##rango intercuartilico
rango
##diagrama de sectores
pie(table(cut(datos$Puntos,breaks = seq(90, 210, by = 12),right = FALSE)),main = "Diagrama de Sectores")
##histograma
hist(datos$Puntos, breaks = seq(90, 210, by = 12), main = "Histograma de Puntos Agrupados",xlab = "Puntos",ylab = "Frecuencia",col = "lightblue", right = FALSE)
##sesgo
##curtosis
getSesCur <- function(tabla,type) {
cantidad_filas <- dim(tabla)[1]
total = 0
if(type == "s"){
ex = 3
} else {
ex = 4
}
for (i in 1:cantidad_filas) {
f = tabla$Frequency[i]
m = tabla$Main[i]
x = (m - media_puntos)
v = f * x^ex
total = total + v
}
resultado = (total / desviacion^ex)
if(type == "c"){
resultado = resultado - 3
}
return(resultado)
}
sesgo <- getSesCur(tabla_puntos,"s")
curtosis <- getSesCur(tabla_puntos,"c")
sesgo
curtosis
getSesCur <- function(tabla,type) {
cantidad_filas <- dim(tabla)[1]
total = 0
if(type == "s"){
ex = 3
} else {
ex = 4
}
for (i in 1:cantidad_filas) {
f = tabla$Frequency[i]
m = tabla$Main[i]
x = (m - media_puntos)
v = f * x*x*x
total = total + v
}
resultado = (total / desviacion*desviacion*desviacion)
if(type == "c"){
resultado = resultado - 3
}
return(resultado)
}
sesgo <- getSesCur(tabla_puntos,"s")
curtosis <- getSesCur(tabla_puntos,"c")
sesgo
curtosis
getSesCur <- function(tabla,type) {
cantidad_filas <- dim(tabla)[1]
total = 0
if(type == "s"){
ex = 3
} else {
ex = 4
}
for (i in 1:cantidad_filas) {
f = tabla$Frequency[i]
m = tabla$Main[i]
x = (m - media_puntos)
v = f * (x*x*x)
total = total + v
}
resultado = (total / (desviacion*desviacion*desviacion))
if(type == "c"){
resultado = resultado - 3
}
return(resultado)
}
sesgo <- getSesCur(tabla_puntos,"s")
curtosis <- getSesCur(tabla_puntos,"c")
sesgo
curtosis
mediana_puntos = tabla_puntos$Lower[puntos_i] + (fi_puntos / tabla_puntos$Frequency[puntos_i])  * ( tabla_puntos$Upper[puntos_i] -  tabla_puntos$Lower[puntos_i])
mediana_puntos
getPosition <- function(n, table){
ite = NULL
for (i in 1:length(table$CF)) {
if (table$CF[i] >= n) {
ite <- i
break
} else {
i = i + 1
}
}
return(ite)
}
#CREE UNA FUNCION QUE CALCULA LA MEDIANA A PARTIR DE LA POSICION, LA TABLA Y EL VALOR DE N
getMediana <- function(n,p,table){
ite = p-1
if(ite==0){
FAA = 0
} else {
FAA <- table$CF[ite]
}
fi = (n - FAA)
mediana = table$Lower[p] + (fi / table$Frequency[p])  * ( table$Upper[p] -  table$Lower[p])
return(mediana)
}
N_puntos = sum(tabla_puntos$Frequency)/2
puntos_i = getPosition(N_puntos,tabla_puntos)
fi_puntos = (N_puntos - tabla_puntos$CF[puntos_i-1])
mediana_puntos = tabla_puntos$Lower[puntos_i] + (fi_puntos / tabla_puntos$Frequency[puntos_i])  * ( tabla_puntos$Upper[puntos_i] -  tabla_puntos$Lower[puntos_i])
mediana_puntos
N_puntos <- sum(tabla_puntos$Frequency) / 2
puntos_i <- getPosition(N_puntos, tabla_puntos)
mediana_puntos <- getMediana(N_puntos, puntos_i, tabla_puntos)
mediana_puntos
media_puntos = sum(tabla_puntos$Main * tabla_puntos$Frequency) / sum(tabla_puntos$Frequency)
media_puntos
puntos_i = which.max(tabla_puntos$Frequency)
puntos_fre1 = (tabla_puntos$Frequency[puntos_i] - tabla_puntos$Frequency[puntos_i - 1])
puntos_fre2 = (tabla_puntos$Frequency[puntos_i] - tabla_puntos$Frequency[puntos_i + 1])
moda_puntos = (tabla_puntos$Lower[puntos_i]) + (puntos_fre1 / (puntos_fre1  + puntos_fre2)) * (tabla_puntos$Upper[puntos_i] - tabla_puntos$Lower[puntos_i])
moda_puntos
mediana_puntos
##varianza
getVarianza <- function(tabla) {
cantidad_filas <- dim(tabla)[1]
total = 0
for (i in 1:cantidad_filas) {
f = tabla$Frequency[i]
m = tabla$Main[i]
x = (m - media_puntos)
v = f * (x*x)
total = total + v
}
varianza = total / (tabla$CF[cantidad_filas]) - 1
return(varianza)
}
varianza <- getVarianza(tabla_puntos)
desviacion <- sqrt(varianza)
varianza
desviacion
tabla_puntos
N_q1 = sum(tabla_puntos$Frequency)/4
N_q3 = (3*sum(tabla_puntos$Frequency))/4
q1_puntos_i = getPosition(N_q1,tabla_puntos)
q3_puntos_i = getPosition(N_q3,tabla_puntos)
q1_puntos = getMediana(N_q1,q1_puntos_i,tabla_puntos)
q3_puntos = getMediana(N_q3,q3_puntos_i,tabla_puntos)
rango = q3_puntos - q1_puntos ##rango intercuartilico
rango
getSesCur <- function(tabla,type) {
cantidad_filas <- dim(tabla)[1]
total = 0
if(type == "s"){
ex = 3
} else {
ex = 4
}
for (i in 1:cantidad_filas) {
f = tabla$Frequency[i]
m = tabla$Main[i]
x = (m - media_puntos)
v = f * x^ex
total = total + v
}
resultado = (total / desviacion^ex)
if(type == "c"){
resultado = resultado - 3
}
return(resultado)
}
sesgo <- getSesCur(tabla_puntos,"s")
curtosis <- getSesCur(tabla_puntos,"c")
sesgo
curtosis
mean(datos$Puntos)
#MODA
modeOf(datos$Puntos)
#MEDIANA
median(datos$Puntos)
## MEDIDAS DE POSICION
#CUARTILES
quantile(datos$Puntos, probs = c(0.25, 0.5, 0.75, 1))
##datos sueltos
#media
table(datos$Puntos)
##datos sueltos
#media
table.freq(datos$Puntos)
##datos sueltos
#media
table.freq(datos)
##datos sueltos
#media
hist(datos$Puntos)
#media
mean(datos$Puntos)
#MODA
modeOf(datos$Puntos)
#MEDIANA
median(datos$Puntos)
#MEDIA
mean(datos$Puntos)
#MODA
modeOf(datos$Puntos)
#MEDIANA
median(datos$Puntos)
# Sesgo (requiere la instalaciÃ³n de la biblioteca e1071)
install.packages("e1071")
library(e1071)
varianza <- var(datos$Puntos)
desviacion_estandar <- sd(datos$Puntos)
rango_intercuartilico <- IQR(datos$Puntos)
sesgo <- skewness(datos$Puntos)
curtosis <- kurtosis(datos$Puntos)
varianza <- var(datos$Puntos)
varianza
desviacion_estandar <- sd(datos$Puntos)
desviacion_estandar
rango_intercuartilico <- IQR(datos$Puntos)
rango_intercuartilico
sesgo <- skewness(datos$Puntos)
sesgo
curtosis <- kurtosis(datos$Puntos)
curtosis
library(lsr)
library(moments)
library(agricolae)
library(e1071)
library(lsr)
library(moments)
library(agricolae)
library(e1071)
#LECTURA DEL CSV
datos <- read.csv("./datos2.csv", header = TRUE, sep = ",")
#LECTURA DEL CSV
datos <- read.csv(".//datos2.csv", header = TRUE, sep = ",")
#LECTURA DEL CSV
datos <- read.csv("datos2.csv", header = TRUE, sep = ",")
#LECTURA DEL CSV
datos <- read.csv("/datos2.csv", header = TRUE, sep = ",")
load("~/cartas-en-R/.RData")
load("~/cartas-en-R/.RData")
for (i in 1:nrow(cards_data)) {
card <- paste(cards_data$face[i], cards_data$suit[i], sep = " of ")
deck[[i]] <- card
}
source("~/.active-rstudio-document", echo=TRUE)
# Paso 1: Cargar el CSV
cards_data <- read.csv("./cards.csv")
source("~/.active-rstudio-document", echo=TRUE)
load("~/cartas-en-R/.RData")
load("~/cartas-en-R/.RData")
source("~/cartas-en-R/test.R", echo=TRUE)
# Paso 1: Cargar el CSV
cards_data <- read.csv("./cards.csv")
# Paso 2: Construir el mazo de cartas
deck <- list()
for (i in 1:nrow(cards_data)) {
card <- paste(cards_data$face[i], cards_data$suit[i], sep = " of ")
deck[[i]] <- card
}
deck <- read.csv("C:/Users/juanf/OneDrive - UNIVERSIDAD INDUSTRIAL DE SANTANDER/Documents/Estadistica I/Proyecto final/deck.csv")
setwd("C:\Users\Dilan\Documents\cartas-en-R")
setwd("C:\Users\Dilan\Documents\cartas-en-R")
setwd("C:/Users/Dilan/Documents/cartas-en-R")
deck <- read.csv("./cards.csv")
View(deck)
write.csv(deck, file = "cards.csv", row.names = FALSE)
# Paso 2: Construir el mazo de cartas
deck <- list()
for (i in 1:nrow(cards_data)) {
card <- paste(cards_data$face[i], cards_data$suit[i], sep = " of ")
deck[[i]] <- card
}
setwd("C:/Users/Dilan/Documents/cartas-en-R")
deck <- read.csv("./cards.csv")
View(deck)
# Mostrar los primeros registros del mazo de cartas
head(deck)
build_deck <- function(cards_data) {
deck <- list()
for (i in 1:nrow(cards_data)) {
card <- paste(cards_data$face[i], cards_data$suit[i], sep = " of ")
deck[[i]] <- card
}
return(deck)
}
# Construir el mazo de cartas
deck <- build_deck(deck)
shuffle_deck <- function(deck) {
deck <- sample(deck)
return(deck)
}
# Ejemplo de barajar el mazo
shuffled_deck <- shuffle_deck(deck)
View(deck)
shuffle_deck <- function(deck) {
deck <- sample(deck)
return(deck)
}
# Ejemplo de barajar el mazo
shuffled_deck <- shuffle_deck(deck)
deal_cards <- function(deck, num_cards) {
cards_dealt <- deck[1:num_cards]
deck <- deck[-(1:num_cards)]
return(list(cards_dealt = cards_dealt, remaining_deck = deck))
}
dealt_cards <- deal_cards(shuffled_deck, 5)
print(dealt_cards)
deal_cards <- function(deck, num_cards) {
cards_dealt <- deck[1:num_cards]
remaining_deck <- deck[-(1:num_cards)]
return(list(cards_dealt = cards_dealt, remaining_deck = remaining_deck))
}
# Ejemplo de repartir 5 cartas del mazo barajado
dealt_cards <- deal_cards(shuffled_deck, 5)
# Mostrar las cartas repartidas
print(dealt_cards$cards_dealt)
bet <- as.numeric(readline(prompt = "Ingrese su apuesta: "))
# Mostrar las cartas repartidas
print(dealt_cards$cards_dealt, bet)
print(bet)
